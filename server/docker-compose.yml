services:
  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "localhost/test", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MONGO_URI: mongodb://mongo:27017/lms
      BUNNY_CDN_HOST: ${BUNNY_CDN_HOST}
      BUNNY_API_KEY: ${BUNNY_API_KEY}
    volumes:
      - /tmp:/tmp
    command: ["tsx", "index.ts"]

  video-worker:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MONGO_URI: mongodb://mongo:27017/lms
      BUNNY_CDN_HOST: ${BUNNY_CDN_HOST}
      BUNNY_API_KEY: ${BUNNY_API_KEY}
    volumes:
      - /tmp:/tmp
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    command: ["tsx", "src/jobs/workers/video.worker.ts"]

volumes:
  redis_data:
  mongo_data:
